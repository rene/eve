#!/bin/sh

# first make sure busybox gets expanded into the glory that is UNIX
/bin/busybox --install /bin

mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t devtmpfs -o size=10m,nr_inodes=248418,mode=755,nosuid,noexec,relatime devtmpfs /dev

root=`cat /proc/cmdline | grep -o '\broot=[^ ]*' | cut -d = -f 2`
if test -z "$root"
then
    exit 1
fi

if [ -e /dev/xen ]; then
   HYPER_BUS=xen
else
   HYPER_BUS=virtio
fi

mkdir /mnt >/dev/null 2>&1
if [ "$root" = "9p" ]; then
    mount -t 9p -o msize=131072,trans="$HYPER_BUS",version=9p2000.L,cache=mmap share_dir /mnt
else
    mount $root /mnt
fi

mkdir /mnt/rootfs/dev >/dev/null 2>&1
mkdir -p /mnt/rootfs/sys/fs/cgroup >/dev/null 2>&1
mkdir /mnt/rootfs/proc >/dev/null 2>&1
mkdir /dev/pts >/dev/null 2>&1
mkdir /dev/shm >/dev/null 2>&1
mkdir /dev/mqueue >/dev/null 2>&1
if [ -d /mnt/rootfs/dev/eve ]; then
   mkdir -p /dev/eve
   mount -o bind /mnt/rootfs/dev/eve /dev/eve
fi
mount -o rbind /dev /mnt/rootfs/dev
mount -o bind /sys /mnt/rootfs/sys
mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /mnt/rootfs/sys/fs/cgroup
awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups | while IFS= read -r sys
do
  cgroup="/mnt/rootfs/sys/fs/cgroup/$sys"
  mkdir -p "$cgroup"
  if ! mountpoint -q "$cgroup"; then
    if ! mount -n -t cgroup -o "$sys" cgroup "$cgroup"; then
      rmdir "$cgroup" || true
    fi
  fi
done
if [ -e /mnt/rootfs/sys/fs/cgroup/memory/memory.use_hierarchy ]; then
  echo 1 > /mnt/rootfs/sys/fs/cgroup/memory/memory.use_hierarchy
fi
mount -t devpts -o gid=5,mode=0620,noexec,nosuid devpts /mnt/rootfs/dev/pts
mount -t tmpfs -o nodev,nosuid,noexec,size=20% shm /mnt/rootfs/dev/shm
mount -t tmpfs -o nodev,nosuid,size=20% tmp /mnt/rootfs/tmp
mount -t mqueue -o nodev,nosuid,noexec none /mnt/rootfs/dev/mqueue
ln -s /proc/self/fd /mnt/rootfs/dev/fd
ln -s /proc/self/fd/0 /mnt/rootfs/dev/stdin
ln -s /proc/self/fd/1 /mnt/rootfs/dev/stdout
ln -s /proc/self/fd/2 /mnt/rootfs/dev/stderr

ip=`cat /proc/cmdline | grep -o '\bip=[^ ]*' | cut -d = -f 2`
gw=`cat /proc/cmdline | grep -o '\bgw=[^ ]*' | cut -d = -f 2`
route=`cat /proc/cmdline | grep -o '\broute=[^ ]*' | cut -d = -f 2`
pvcalls=`cat /proc/cmdline | grep  'pvcalls=1'`
dhcp=`cat /proc/cmdline | grep  'dhcp=1'`
# shellcheck disable=SC2002,SC2006
chrony=`cat /proc/cmdline | grep 'chrony=1'`
if test "$pvcalls"
then
        mkdir -p /mnt/rootfs/etc
        echo "nameserver 8.8.8.8" > /mnt/rootfs/etc/resolv.conf
        echo "options use-vc" >> /mnt/rootfs/etc/resolv.conf
elif test "$ip"
then
    # ipv4
    if [ "$ip" != "${ip#*[0-9].[0-9]}" ]
    then
        ifconfig eth0 $ip up
        if [ "$route" ] && [ "$gw" ]
        then
            route add -net $route gw $gw eth0
        fi
        mkdir -p /mnt/rootfs/etc
        echo "nameserver 8.8.8.8" > /mnt/rootfs/etc/resolv.conf
    # ipv6
    elif [ "$ip" != "${ip#*:[0-9a-fA-F]}" ]
    then
        ifconfig eth0 add $ip up
        if [ "$route" ] && [ "$gw" ]
        then
            route -A inet6 add $route gw $gw eth0
        fi
        mkdir -p /mnt/rootfs/etc
        echo "nameserver 2001:4860:4860::8888" > /mnt/rootfs/etc/resolv.conf
    fi
elif test "$dhcp"
then
    ip link set dev lo up
    mkdir -p /mnt/rootfs/etc
    echo "127.0.0.1 localhost" > /mnt/rootfs/etc/hosts
    echo "::1 localhost" >> /mnt/rootfs/etc/hosts
    for i in $(cd /sys/class/net && echo eth*); do
        ip link set dev "$i" up
        udhcpc --interface="$i" --script=/udhcpc_script.sh -O staticroutes -b
    done
fi

# mount modules shared by EVE-OS in /mnt/modules to /lib/modules
# if /lib/modules inside container is not empty we will silently ignore the content
# we use overlayfs to allow replacing of modules from user's entrypoint scripts
# but changes will not persist reboot
mkdir -p /mnt/rootfs/lib/modules
mkdir -p /mnt/rootfs/tmp/modules.upper
mkdir -p /mnt/rootfs/tmp/modules.work
mount -t overlay -o rw,relatime,lowerdir=/mnt/modules,upperdir=/mnt/rootfs/tmp/modules.upper,workdir=/mnt/rootfs/tmp/modules.work overlay /mnt/rootfs/lib/modules

# Mounting requested volumes
echo "Executing /mount_disk.sh"
/mount_disk.sh

# Commence launch sequence
source /mnt/environment

echo "Run acpid daemon"
acpid -l /proc/self/fd/1

# Start chrony daemon for clock synchronization through PTP_KVM device
if test "$chrony" -o "$EVE_ENABLE_CHRONY" = "1"; then
  # PTP_KVM is only available with KVM
  if test -c /dev/ptp0; then
    echo "Run chronyd daemon"
    mkdir -p /etc/chrony
    cat > /etc/chrony/chrony.conf << EOF
# This file was autogenerated by EVE
refclock PHC /dev/ptp0 poll 2
driftfile /var/lib/chrony/chrony.drift
ntsdumpdir /var/lib/chrony
logdir /var/log/chrony
maxupdateskew 100.0
EOF
    /usr/sbin/chronyd -u root -f /etc/chrony/chrony.conf
  fi
fi

cmd=`cat /mnt/cmdline`
echo "Executing $cmd"

ug="0 0"
if [ -f /mnt/ug ]; then
  ug=$(cat /mnt/ug)
fi
echo "Executing with uid gid: $ug"

if grep -q "console=tty0" /proc/cmdline; then
  #shellcheck disable=SC2086
  #we have tty0 console primary, so will add output to hvc0 for logging
  eval /chroot2 /mnt/rootfs "${WORKDIR:-/}" $ug $cmd 2>&1 | tee -i /dev/hvc0
else
  #shellcheck disable=SC2086
  eval /chroot2 /mnt/rootfs "${WORKDIR:-/}" $ug $cmd <> /dev/console 2>&1
fi

# once the command exits -- the only thing left is shut everything down
/sbin/poweroff
