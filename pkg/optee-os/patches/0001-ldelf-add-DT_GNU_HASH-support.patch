From 0bd9c9161194473b84376ab3a36b9cb63875dbdb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ren=C3=AA=20de=20Souza=20Pinto?= <rene@renesp.com.br>
Date: Wed, 29 Mar 2023 16:25:08 +0200
Subject: [PATCH] ldelf: add DT_GNU_HASH support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This commit adds support to DT_GNU_HASH on ELF files. The following commits
were cherry-picked and adapted from OP-TEE master repository:

6627f23e ldelf: get DT_HASH info from section headers
bdf82531 ldelf: add DT_GNU_HASH support

Ported from:

Repository: https://github.com/OP-TEE/optee_os.git
Branch:     master
Revision:   b300b5a37c8f4836a1b26c69af02397a35634dca

Signed-off-by: RenÃª de Souza Pinto <rene@renesp.com.br>
---
 ldelf/ta_elf.c     | 102 ++++++++++++++-----------
 ldelf/ta_elf.h     |  18 +++++
 ldelf/ta_elf_rel.c | 187 ++++++++++++++++++++++++++++++---------------
 3 files changed, 201 insertions(+), 106 deletions(-)

diff --git a/ldelf/ta_elf.c b/ldelf/ta_elf.c
index 42ad72f09..4f2436480 100644
--- a/ldelf/ta_elf.c
+++ b/ldelf/ta_elf.c
@@ -189,37 +189,6 @@ static void read_dyn(struct ta_elf *elf, vaddr_t addr,
 	}
 }
 
-static void save_hashtab_from_segment(struct ta_elf *elf, unsigned int type,
-				      vaddr_t addr, size_t memsz)
-{
-	size_t dyn_entsize = 0;
-	size_t num_dyns = 0;
-	size_t n = 0;
-	unsigned int tag = 0;
-	size_t val = 0;
-
-	if (type != PT_DYNAMIC)
-		return;
-
-	check_phdr_in_range(elf, type, addr, memsz);
-
-	if (elf->is_32bit)
-		dyn_entsize = sizeof(Elf32_Dyn);
-	else
-		dyn_entsize = sizeof(Elf64_Dyn);
-
-	assert(!(memsz % dyn_entsize));
-	num_dyns = memsz / dyn_entsize;
-
-	for (n = 0; n < num_dyns; n++) {
-		read_dyn(elf, addr, n, &tag, &val);
-		if (tag == DT_HASH) {
-			elf->hashtab = (void *)(val + elf->load_addr);
-			break;
-		}
-	}
-}
-
 static void check_range(struct ta_elf *elf, const char *name, const void *ptr,
 			size_t sz)
 {
@@ -260,30 +229,75 @@ static void check_hashtab(struct ta_elf *elf, void *ptr, size_t num_buckets,
 	check_range(elf, "DT_HASH", ptr, sz);
 }
 
+static void check_gnu_hashtab(struct ta_elf *elf, void *ptr)
+{
+	struct gnu_hashtab *h = ptr;
+	size_t num_words = 4; /* nbuckets, symoffset, bloom_size, bloom_shift */
+	size_t bloom_words = 0;
+	size_t sz = 0;
+
+	if (!ALIGNMENT_IS_OK(ptr, uint32_t))
+		err(TEE_ERROR_BAD_FORMAT, "Bad alignment of DT_GNU_HASH %p",
+		    ptr);
+
+	if (elf->gnu_hashtab_size < sizeof(*h))
+		err(TEE_ERROR_BAD_FORMAT, "DT_GNU_HASH too small");
+
+	/* Check validity of h->nbuckets and h->bloom_size */
+
+	if (elf->is_32bit)
+		bloom_words = h->bloom_size;
+	else
+		bloom_words = h->bloom_size * 2;
+	if (ADD_OVERFLOW(num_words, h->nbuckets, &num_words) ||
+	    ADD_OVERFLOW(num_words, bloom_words, &num_words) ||
+	    MUL_OVERFLOW(num_words, sizeof(uint32_t), &sz) ||
+	    sz > elf->gnu_hashtab_size)
+		err(TEE_ERROR_BAD_FORMAT, "DT_GNU_HASH overflow");
+}
+
 static void save_hashtab(struct ta_elf *elf)
 {
 	uint32_t *hashtab = NULL;
 	size_t n = 0;
 
 	if (elf->is_32bit) {
-		Elf32_Phdr *phdr = elf->phdr;
+		Elf32_Shdr *shdr = elf->shdr;
 
-		for (n = 0; n < elf->e_phnum; n++)
-			save_hashtab_from_segment(elf, phdr[n].p_type,
-						  phdr[n].p_vaddr,
-						  phdr[n].p_memsz);
+		for (n = 0; n < elf->e_shnum; n++) {
+			void *addr = (void *)(vaddr_t)(shdr[n].sh_addr +
+						       elf->load_addr);
+
+			if (shdr[n].sh_type == SHT_HASH) {
+				elf->hashtab = addr;
+			} else if (shdr[n].sh_type == SHT_GNU_HASH) {
+				elf->gnu_hashtab = addr;
+				elf->gnu_hashtab_size = shdr[n].sh_size;
+			}
+		}
 	} else {
-		Elf64_Phdr *phdr = elf->phdr;
+		Elf64_Shdr *shdr = elf->shdr;
 
-		for (n = 0; n < elf->e_phnum; n++)
-			save_hashtab_from_segment(elf, phdr[n].p_type,
-						  phdr[n].p_vaddr,
-						  phdr[n].p_memsz);
+		for (n = 0; n < elf->e_shnum; n++) {
+			void *addr = (void *)(vaddr_t)(shdr[n].sh_addr +
+						       elf->load_addr);
+
+			if (shdr[n].sh_type == SHT_HASH) {
+				elf->hashtab = addr;
+			} else if (shdr[n].sh_type == SHT_GNU_HASH) {
+				elf->gnu_hashtab = addr;
+				elf->gnu_hashtab_size = shdr[n].sh_size;
+			}
+		}
 	}
 
-	check_hashtab(elf, elf->hashtab, 0, 0);
-	hashtab = elf->hashtab;
-	check_hashtab(elf, elf->hashtab, hashtab[0], hashtab[1]);
+	if (elf->hashtab) {
+		check_hashtab(elf, elf->hashtab, 0, 0);
+		hashtab = elf->hashtab;
+		check_hashtab(elf, elf->hashtab, hashtab[0], hashtab[1]);
+	}
+	if (elf->gnu_hashtab)
+		check_gnu_hashtab(elf, elf->gnu_hashtab);
 }
 
 static void save_soname_from_segment(struct ta_elf *elf, unsigned int type,
diff --git a/ldelf/ta_elf.h b/ldelf/ta_elf.h
index 853b21d48..dd030764d 100644
--- a/ldelf/ta_elf.h
+++ b/ldelf/ta_elf.h
@@ -58,6 +58,9 @@ struct ta_elf {
 
 	/* DT_HASH hash table for faster resolution of external symbols */
 	void *hashtab;
+	/* DT_GNU_HASH table as an alternative to DT_HASH */
+	void *gnu_hashtab;
+	size_t gnu_hashtab_size;
 
 	/* DT_SONAME */
 	char *soname;
@@ -89,6 +92,21 @@ struct ta_elf {
 
 TAILQ_HEAD(ta_elf_queue, ta_elf);
 
+/* Format of the DT_GNU_HASH entry in the ELF dynamic section */
+struct gnu_hashtab {
+	uint32_t nbuckets;
+	uint32_t symoffset;
+	uint32_t bloom_size;
+	uint32_t bloom_shift;
+	/*
+	 * Followed by:
+	 *
+	 * uint{32,64}_t bloom[bloom_size];
+	 * uint32_t buckets[nbuckets];
+	 * uint32_t chain[];
+	 */
+};
+
 typedef void (*print_func_t)(void *pctx, const char *fmt, va_list ap)
 	__printf(2, 0);
 
diff --git a/ldelf/ta_elf_rel.c b/ldelf/ta_elf_rel.c
index 93a5abe4e..e51ed9d8a 100644
--- a/ldelf/ta_elf_rel.c
+++ b/ldelf/ta_elf_rel.c
@@ -32,10 +32,21 @@ static uint32_t elf_hash(const char *name)
 	return h;
 }
 
-static bool __resolve_sym(struct ta_elf *elf, unsigned int st_bind,
-			  unsigned int st_type, size_t st_shndx,
-			  size_t st_name, size_t st_value, const char *name,
-			  vaddr_t *val, bool weak_ok)
+static uint32_t gnu_hash(const char *name)
+{
+	const unsigned char *p = (const unsigned char *)name;
+	uint32_t h = 5381;
+
+	while (*p)
+		h = (h << 5) + h + *p++;
+
+	return h;
+}
+
+static bool sym_compare(struct ta_elf *elf, unsigned int st_bind,
+			unsigned int st_type, size_t st_shndx,
+			size_t st_name, size_t st_value, const char *name,
+			vaddr_t *val, bool weak_ok)
 {
 	bool bind_ok = false;
 
@@ -78,63 +89,121 @@ static bool __resolve_sym(struct ta_elf *elf, unsigned int st_bind,
 	return true;
 }
 
-static TEE_Result resolve_sym_helper(uint32_t hash, const char *name,
-				     vaddr_t *val, struct ta_elf *elf,
-				     bool weak_ok)
+static bool check_found_sym(struct ta_elf *elf, const char *name, vaddr_t *val,
+			    bool weak_ok, size_t n)
 {
+	Elf32_Sym *sym32 = NULL;
+	Elf64_Sym *sym64 = NULL;
+	unsigned int st_bind = 0;
+	unsigned int st_type = 0;
+	size_t st_shndx = 0;
+	size_t st_name = 0;
+	size_t st_value = 0;
+
+	if (n >= elf->num_dynsyms)
+		err(TEE_ERROR_BAD_FORMAT, "Index out of range");
+
 	/*
-	 * Using uint32_t here for convenience because both Elf64_Word
-	 * and Elf32_Word are 32-bit types
+	 * We're loading values from sym[] which later
+	 * will be used to load something.
+	 * => Spectre V1 pattern, need to cap the index
+	 * against speculation.
 	 */
-	uint32_t *hashtab = elf->hashtab;
-	uint32_t nbuckets = hashtab[0];
-	uint32_t nchains = hashtab[1];
-	uint32_t *bucket = &hashtab[2];
-	uint32_t *chain = &bucket[nbuckets];
-	size_t n = 0;
+	n = confine_array_index(n, elf->num_dynsyms);
 
 	if (elf->is_32bit) {
-		Elf32_Sym *sym = elf->dynsymtab;
+		sym32 = elf->dynsymtab;
+		st_bind = ELF32_ST_BIND(sym32[n].st_info);
+		st_type = ELF32_ST_TYPE(sym32[n].st_info);
+		st_shndx = sym32[n].st_shndx;
+		st_name = sym32[n].st_name;
+		st_value = sym32[n].st_value;
+	} else {
+		sym64 = elf->dynsymtab;
+		st_bind = ELF64_ST_BIND(sym64[n].st_info);
+		st_type = ELF64_ST_TYPE(sym64[n].st_info);
+		st_shndx = sym64[n].st_shndx;
+		st_name = sym64[n].st_name;
+		st_value = sym64[n].st_value;
+	}
 
-		for (n = bucket[hash % nbuckets]; n; n = chain[n]) {
-			if (n >= nchains || n >= elf->num_dynsyms)
-				err(TEE_ERROR_BAD_FORMAT,
-				    "Index out of range");
-			/*
-			 * We're loading values from sym[] which later
-			 * will be used to load something.
-			 * => Spectre V1 pattern, need to cap the index
-			 * against speculation.
-			 */
-			n = confine_array_index(n, elf->num_dynsyms);
-			if (__resolve_sym(elf,
-					  ELF32_ST_BIND(sym[n].st_info),
-					  ELF32_ST_TYPE(sym[n].st_info),
-					  sym[n].st_shndx,
-					  sym[n].st_name,
-					  sym[n].st_value, name, val, weak_ok))
-				return TEE_SUCCESS;
+	return sym_compare(elf, st_bind, st_type, st_shndx, st_name, st_value,
+			   name, val, weak_ok);
+}
+
+static TEE_Result resolve_sym_helper(const char *name, vaddr_t *val,
+				     struct ta_elf *elf, bool weak_ok)
+{
+	uint32_t n = 0;
+	uint32_t hash = 0;
+
+	if (elf->gnu_hashtab) {
+		struct gnu_hashtab *h = elf->gnu_hashtab;
+		uint32_t *end = (void *)((uint8_t *)elf->gnu_hashtab +
+					 elf->gnu_hashtab_size);
+		uint32_t *bucket = NULL;
+		uint32_t *chain = NULL;
+		uint32_t hashval = 0;
+
+		hash = gnu_hash(name);
+
+		if (elf->is_32bit) {
+			uint32_t *bloom = (void *)(h + 1);
+			uint32_t word = bloom[(hash / 32) % h->bloom_size];
+			uint32_t mask = BIT32(hash % 32) |
+					BIT32((hash >> h->bloom_shift) % 32);
+
+			if ((word & mask) != mask)
+				return TEE_ERROR_ITEM_NOT_FOUND;
+			bucket = bloom + h->bloom_size;
+		} else {
+			uint64_t *bloom = (void *)(h + 1);
+			uint64_t word = bloom[(hash / 64) % h->bloom_size];
+			uint64_t mask = BIT64(hash % 64) |
+					BIT64((hash >> h->bloom_shift) % 64);
+
+			if ((word & mask) != mask)
+				return TEE_ERROR_ITEM_NOT_FOUND;
+			bucket = (uint32_t *)(bloom + h->bloom_size);
 		}
-	} else {
-		Elf64_Sym *sym = elf->dynsymtab;
+		chain = bucket + h->nbuckets;
+
+		n = bucket[hash % h->nbuckets];
+		if (n < h->symoffset)
+			return TEE_ERROR_ITEM_NOT_FOUND;
+
+		hash |= 1;
+		do {
+			size_t idx = n - h->symoffset;
+
+			if (chain + idx > end)
+				return TEE_ERROR_ITEM_NOT_FOUND;
+
+			hashval = chain[idx];
+
+			if ((hashval | 1) == hash &&
+			    check_found_sym(elf, name, val, weak_ok, n))
+				return TEE_SUCCESS;
+
+			n++;
+		} while (!(hashval & 1));
+	} else if (elf->hashtab) {
+		/*
+		 * Using uint32_t here for convenience because both Elf64_Word
+		 * and Elf32_Word are 32-bit types
+		 */
+		uint32_t *hashtab = elf->hashtab;
+		uint32_t nbuckets = hashtab[0];
+		uint32_t nchains = hashtab[1];
+		uint32_t *bucket = &hashtab[2];
+		uint32_t *chain = &bucket[nbuckets];
+
+		hash = elf_hash(name);
 
 		for (n = bucket[hash % nbuckets]; n; n = chain[n]) {
-			if (n >= nchains || n >= elf->num_dynsyms)
-				err(TEE_ERROR_BAD_FORMAT,
-				    "Index out of range");
-			/*
-			 * We're loading values from sym[] which later
-			 * will be used to load something.
-			 * => Spectre V1 pattern, need to cap the index
-			 * against speculation.
-			 */
-			n = confine_array_index(n, elf->num_dynsyms);
-			if (__resolve_sym(elf,
-					  ELF64_ST_BIND(sym[n].st_info),
-					  ELF64_ST_TYPE(sym[n].st_info),
-					  sym[n].st_shndx,
-					  sym[n].st_name,
-					  sym[n].st_value, name, val, weak_ok))
+			if (n >= nchains)
+				err(TEE_ERROR_BAD_FORMAT, "Index out of range");
+			if (check_found_sym(elf, name, val, weak_ok, n))
 				return TEE_SUCCESS;
 		}
 	}
@@ -154,25 +223,19 @@ TEE_Result ta_elf_resolve_sym(const char *name, vaddr_t *val,
 			      struct ta_elf **found_elf,
 			      struct ta_elf *elf)
 {
-	uint32_t hash = elf_hash(name);
-
 	if (elf) {
 		/* Search global symbols */
-		if (!resolve_sym_helper(hash, name, val, elf,
-					false /* !weak_ok */))
+		if (!resolve_sym_helper(name, val, elf, false /* !weak_ok */))
 			goto success;
 		/* Search weak symbols */
-		if (!resolve_sym_helper(hash, name, val, elf,
-					true /* weak_ok */))
+		if (!resolve_sym_helper(name, val, elf, true /* weak_ok */))
 			goto success;
 	}
 
 	TAILQ_FOREACH(elf, &main_elf_queue, link) {
-		if (!resolve_sym_helper(hash, name, val, elf,
-					false /* !weak_ok */))
+		if (!resolve_sym_helper(name, val, elf, false /* !weak_ok */))
 			goto success;
-		if (!resolve_sym_helper(hash, name, val, elf,
-					true /* weak_ok */))
+		if (!resolve_sym_helper(name, val, elf, true /* weak_ok */))
 			goto success;
 	}
 
-- 
2.39.2

