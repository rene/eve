From 2ce1a1c822747fa545a7ca3c1d7e48d845696564 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ren=C3=AA=20de=20Souza=20Pinto?= <rene@renesp.com.br>
Date: Thu, 16 Feb 2023 18:28:55 +0100
Subject: [PATCH 44/47] watchdog: advantech: Fix build warnings and stack
 vector allocation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Fix build warnings
- Remove variable length stack array declaration (not compatible with ISO
  C90). A buffer of 32 bytes should be enough for i2c messages.

Signed-off-by: RenÃª de Souza Pinto <rene@renesp.com.br>
---
 drivers/watchdog/watchdog_advantech.c | 27 +++++++++++++++------------
 1 file changed, 15 insertions(+), 12 deletions(-)

diff --git a/drivers/watchdog/watchdog_advantech.c b/drivers/watchdog/watchdog_advantech.c
index 5e5077c6b690..650f56c29dfa 100755
--- a/drivers/watchdog/watchdog_advantech.c
+++ b/drivers/watchdog/watchdog_advantech.c
@@ -103,21 +103,23 @@ struct watchdog_info adv_wdt_info = {
 
 static int adv_wdt_i2c_write_reg(struct i2c_client *client, u8 reg, void *buf, size_t len)
 {
-	u8 val[1 + len];
+	u8 buffer[32];
 	u8 retry = 0;
 	int err;
+	struct i2c_msg msg[1];
 
-	struct i2c_msg msg[1] = {
-		{
-			.addr = client->addr,
-			.flags = 0,
-			.len = sizeof(val),
-			.buf = val,
-		}
-	};
+	if ((1 + len) > sizeof(buffer)) {
+		dev_crit(&client->dev, "i2c message too long: %lu bytes\n", len);
+		return -EIO;
+	}
+
+	msg[0].addr  = client->addr;
+	msg[0].flags = 0;
+	msg[0].len   = 1 + len;
+	msg[0].buf   = buffer;
 
-	val[0] = reg;
-	memcpy(&val[1], buf, len);
+	buffer[0] = reg;
+	memcpy(&buffer[1], buf, len);
 
 	do {
 		err = i2c_transfer(client->adapter, msg, 1);
@@ -316,8 +318,9 @@ static long adv_wdt_ioctl(struct file *file, unsigned int cmd,
 		adv_wdt.timeout = new_value;
 		adv_wdt_i2c_set_timeout(adv_client, adv_wdt.timeout);
 		adv_wdt_ping();
+		adv_wdt_i2c_read_timeout(adv_client, &adv_wdt.timeout);
+		return put_user((int)(adv_wdt.timeout & 0xFFFF)/10, p);
 
-		/* Fallthrough to return current value */
 	case WDIOC_GETTIMEOUT:
 		adv_wdt_i2c_read_timeout(adv_client, &adv_wdt.timeout);
 		//printk("WDIOC_GETTIMEOUT:%x\n", adv_wdt.timeout);
-- 
2.39.2

