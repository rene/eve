# Copyright (c) 2025, Zededa, Inc.
# SPDX-License-Identifier: Apache-2.0
---
name: Rerun CI

on:  # yamllint disable-line rule:truthy
  issue_comment:
    types: [created]

jobs:
  rerun-failed-or-cancel:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/rerun-ci')
    runs-on: ubuntu-latest

    permissions:
      actions: write
      issues: read
      pull-requests: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh jq -y

      - name: Parse CODEOWNERS to get allowed users
        run: |
          CODEOWNERS=".github/CODEOWNERS"
          awk '{for(i=1;i<=NF;i++) if($i ~ /^@/) print substr($i,2)}' "$CODEOWNERS" | sort -u > allowed_users.txt

      - name: Check if comment author is allowed
        run: |
          COMMENT_USER="${{ github.event.comment.user.login }}"
          echo "User: $COMMENT_USER"
          if ! grep -Fxq "$COMMENT_USER" allowed_users.txt; then
            echo "User $COMMENT_USER is not allowed to rerun CI." >&2
            exit 1
          fi

      - name: Set run mode (rerun or cancel+rerun)
        id: mode
        run: |
          BODY="${{ github.event.comment.body }}"
          if [[ "$BODY" =~ /rerun-ci[[:space:]]+cancel ]]; then
            echo "mode=cancel" >> $GITHUB_OUTPUT
          else
            echo "mode=rerun" >> $GITHUB_OUTPUT
          fi

      - name: Find and act on workflow runs for this PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          PR_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"

          # Find the branch for this PR
          BRANCH=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json headRefName -q .headRefName)
          echo "Branch for PR $PR_NUMBER is $BRANCH"

          # Get all workflow runs for this PR's branch and event
          RUNS=$(gh run list --repo "$REPO" --branch "$BRANCH" --json databaseId,status,conclusion,event,headBranch,workflowName,displayTitle,headSha,pullRequests)

          # Filter runs that are associated with this PR number
          RUN_IDS=$(echo "$RUNS" | jq -r \
            '[ .[] | select(.pullRequests[]?.number=='"$PR_NUMBER"') | .databaseId ] | @tsv')

          if [[ "${{ steps.mode.outputs.mode }}" == "cancel" ]]; then
            # Cancel all currently in-progress runs
            for run_id in $RUN_IDS; do
              STATUS=$(gh run view "$run_id" --repo "$REPO" --json status -q .status)
              if [[ "$STATUS" == "in_progress" || "$STATUS" == "queued" || "$STATUS" == "waiting" ]]; then
                echo "Canceling run $run_id"
                gh run cancel "$run_id" --repo "$REPO"
              fi
            done

            # Wait for all runs to be not in-progress anymore (use backoff to avoid hammering)
            for i in {1..10}; do
              sleep $((i))  # quick backoff
              ALL_DONE=true
              for run_id in $RUN_IDS; do
                STATUS=$(gh run view "$run_id" --repo "$REPO" --json status -q .status)
                if [[ "$STATUS" == "in_progress" || "$STATUS" == "queued" || "$STATUS" == "waiting" ]]; then
                  ALL_DONE=false
                fi
              done
              [[ "$ALL_DONE" == "true" ]] && break
            done
          fi

          # Now rerun all runs that are completed and not successful
          for run_id in $RUN_IDS; do
            STATUS=$(gh run view "$run_id" --repo "$REPO" --json status,conclusion -q '.status')
            CONCLUSION=$(gh run view "$run_id" --repo "$REPO" --json status,conclusion -q '.conclusion')
            if [[ "$STATUS" == "completed" && "$CONCLUSION" != "success" && "$CONCLUSION" != "skipped" ]]; then
              echo "Re-running failed/canceled run $run_id"
              gh run rerun "$run_id" --repo "$REPO"
            fi
          done
